/**
    "name": "Binary to Decimal"
    "description": "This module converts a binary number into a series of decimal numbers. This is helpful for displaying a binary number on seven-segment displays or printing it to the USB port."
**/
/******************************************************************************

   The MIT License (MIT)

   Copyright (c) 2019 Alchitry

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   THE SOFTWARE.

   *****************************************************************************

   Binary to Decimal: This module takes a binary number and splits it into
   base 10 decimal digits. The maximum number of digits is specified by the
   parameter DIGITS. If LEADING_ZEROS is 0, leading zeros will have the value
   of 10. If it is 1, they will be regular 0's. If the input value is too large
   for a decimal number of DIGITS digits, all digits will have the value 11.
*/

module binToDec #(
    DIGITS : DIGITS > 0 && DIGITS < 20,           // limited by 64 bit constants in the tools
    LEADING_ZEROS = 0 : LEADING_ZEROS == 0 || LEADING_ZEROS == 1
)(
    input value[$clog2($pow(10, DIGITS))],            // minimum number of bits for DIGITS
    output digits[DIGITS][4]                          // decimal output
) {
    always {
        digits = DIGITSx{{4d11}}                            // default to invalid number for all digits

        sig remainder[$width(value)] = value                // initialize remainder
        sig blank = !LEADING_ZEROS                          // set blank zero flag

        if (value < $pow(10, DIGITS)) {                     // if can be displayed
            repeat(j, DIGITS, DIGITS-1, -1) {               // for each digit
                sig scale[$width(value)] = $pow(10, j)      // get the scale for the digit

                if (remainder < scale) {                    // if this digit is 0
                    if (j != 0 && blank)                    // use 10 for blank
                        digits[j] = 10
                    else                                    // or 0 for zero
                        digits[j] = 0
                } else {                                    // digit is 1-9
                    blank = 0                               // don't blank future zeros
                    sig sub_value[$width(value)] = 0        // default to no subtraction
                    repeat(i, 9, 9, -1) {                   // for each possible value (starting from 9)
                        if (remainder < (i+1) * scale) {    // if remainder is less than value
                            digits[j] = i                   // set digit to this value
                            sub_value = i * scale           // set subtraction value
                        }
                    }
                    remainder = remainder - sub_value       // subtract off last digit
                }
            }
        }
    }
}