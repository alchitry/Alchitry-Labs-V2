/**
    "name": "DVI Decoder"
    "description": "Decodes a DVI stream into video data. Typically used by the HDMI Decoder module and not directly."
    "supportedBoards" : ["Au", "Au+", "AuV2"]
**/
/******************************************************************************

   The MIT License (MIT)

   Copyright (c) 2025 Alchitry

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   THE SOFTWARE.

   ****************************************************************************

   The MAX_CLK_FREQ and MIN_CLK_FREQ paramters are used to specify the expected
   minimum and maximum pixel clocks. Timing is performed based on MAX_CLK_FREQ
   and the MIN_CLK_FREQ is used to check if the minimum frequency will be
   supported by the PLL used to create the x5 data clock.

   These will usually be the max range of 80-125MHz.
*/

module dvi_decoder  #(
    MAX_CLK_FREQ ~ 125_000_000 : MAX_CLK_FREQ > 14_000_000 && MAX_CLK_FREQ <= 125_000_000,
    MIN_CLK_FREQ ~ 80_000_000 : MIN_CLK_FREQ > 14_000_000 && MIN_CLK_FREQ <= MAX_CLK_FREQ &&
                      ((160000000 - 1) / MAX_CLK_FREQ + 1) * 5 * MIN_CLK_FREQ >= 800_000_000
)(
    input clock_p,
    input clock_n,
    input data_p[3],
    input data_n[3],
    input rst,

    output pll_locked,
    output pclk,
    output pclkx5,

    output hsync,
    output vsync,
    output de,

    output red[8],
    output green[8],
    output blue[8]
) {

    ibufds bufds (.i(clock_p), .ib(clock_n))

    dvi_clocks clocks(#CLK_FREQ(MAX_CLK_FREQ), .clk(bufds.o), .rst(rst))

    .rst(!clocks.locked),
    .pclk(clocks.pclk),
    .pclkx5(clocks.pclkx5),
    #CLK_FREQ(MAX_CLK_FREQ) {
        tmds_decoder dec_r
        tmds_decoder dec_g
        tmds_decoder dec_b
    }

    always {
        dec_r.data_p = data_p[2]
        dec_r.data_n = data_n[2]
        dec_g.data_p = data_p[1]
        dec_g.data_n = data_n[1]
        dec_b.data_p = data_p[0]
        dec_b.data_n = data_n[0]

        dec_r.others_ready = dec_g.ready & dec_b.ready
        dec_g.others_ready = dec_r.ready & dec_b.ready
        dec_b.others_ready = dec_r.ready & dec_g.ready

        dec_r.others_valid = dec_g.valid & dec_b.valid
        dec_g.others_valid = dec_r.valid & dec_b.valid
        dec_b.others_valid = dec_r.valid & dec_g.valid

        pll_locked = clocks.locked
        pclk = clocks.pclk
        pclkx5 = clocks.pclkx5

        hsync = dec_b.c0
        vsync = dec_b.c1
        de = dec_b.de

        red = dec_r.data
        green = dec_g.data
        blue = dec_b.data
    }
}