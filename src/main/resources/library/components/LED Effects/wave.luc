/**
    "name" : "Wave",
    "description" : "Fancy wave effect for 8 LEDs. This is the module used in the default configuration that ships on the Alchitry boards."
**/
/******************************************************************************

    The MIT License (MIT)

    Copyright (c) 2024 Alchitry

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.

    *****************************************************************************

    Wave: This module generates the fancy wave
    pattern for the default program loaded on
    the Mojo. Changing CTR_LEN will change how
    fast it goes.
*/

module wave #(
    RES = $isSim() ? 3 : 8 : RES > 1,
    CTR_LEN = $isSim() ? 9 : 25 : CTR_LEN >= RES+1,
    OUT_SIZE = 8 : OUT_SIZE > 0
)(
    input clk,     // clock
    input rst,     // reset
    output out[OUT_SIZE]  // LED output
) {

    // counter
    dff ctr[CTR_LEN](.clk(clk),.rst(rst));

    sig acmp[RES]   // intermediate value
    sig result[RES+1] // intermediate value

    always {
        // increment the counter
        ctr.d = ctr.q + 1
        out = 0

        // for each output
        repeat (i, 8) {
            // take the top bits of the counter and
            // offset differently them for each output
            result = ctr.q[CTR_LEN-1-:RES+1] + i * $pow(2,RES) / 4

            // invert the result to count down
            acmp = result[RES]? ~result[RES-1:0] : result[RES-1:0]

            // PWM output
            out[i] = acmp > ctr.q[RES-1:0]
        }
    }
}