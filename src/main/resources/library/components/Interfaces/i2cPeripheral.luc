/**
    "name": "I2C Peripheral"
    "description": "I2C peripheral (slave) that can be used to interface with an I2C controller. It has a configurable device ID. After a byte is read, you need to tell the module if it should respond with a byte or wait for more bytes to be read."
**/
/******************************************************************************

   The MIT License (MIT)

   Copyright (c) 2019 Alchitry

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   THE SOFTWARE.

   *****************************************************************************/

module i2cPeripheral #(
    DEVICE_ID = 7h50 : $resize($unsigned(DEVICE_ID),7) == DEVICE_ID
)(
    input clk,  // clock
    input rst,  // reset
    inout sda,
    input scl,
    output start,
    output stop,
    output write,
    output rxData[8],
    output rxValid,
    output next,
    input txEnable,
    input txData[8],
    output ack,
    output enabled
) {

    enum States {IDLE, WAIT_ID, WAIT_STOP, READ_BYTE, WRITE_BYTE, ACK, ACK_WAIT, READ_ACK, READ_ACK_WAIT}

    .clk(clk) {
        .rst(rst) {
            dff state[$width(States)]
        }
        dff sdaSync[3]
        dff sclSync[3]
        dff bitCtr[3]
        dff data[8]
        dff txFlag
        dff valid
        dff captureTx
        dff writeAck
    }

    sig clkRise
    sig clkFall

    always {
        // defaults
        start = 0
        stop = 0
        write = 0
        rxData = data.q
        rxValid = valid.q
        next = 0
        ack = 0
        sda = bz
        valid.d = 0

        enabled = 0

        sdaSync.d = c{sdaSync.q[1:0], sda}
        sclSync.d = c{sclSync.q[1:0], scl}

        clkRise = sclSync.q[1] && !sclSync.q[2]
        clkFall = !sclSync.q[1] && sclSync.q[2]

        case (state.q) {
            States.WAIT_ID:
                if (clkRise) {
                    data.d = c{data.q[6:0], sdaSync.q[2]}
                    bitCtr.d = bitCtr.q + 1
                    if (bitCtr.q == 7) {
                        if (data.q[6:0] == DEVICE_ID){
                            start = 1
                            captureTx.d = 1
                            write = ~sdaSync.q[2]
                            state.d = States.ACK
                        } else {
                            state.d = States.WAIT_STOP
                        }
                    }
                }
            States.ACK:
                if (clkFall)
                    state.d = States.ACK_WAIT
            States.ACK_WAIT:
                if (clkFall)
                    state.d = txFlag.q ? States.WRITE_BYTE : States.READ_BYTE
                sda = 0
                enabled = 1
            States.READ_BYTE:
                if (clkRise) {
                    data.d = c{data.q[6:0], sdaSync.q[2]}
                    bitCtr.d = bitCtr.q + 1
                    if (bitCtr.q == 7) {
                        state.d = States.ACK
                        next = 1
                        captureTx.d = 1
                        valid.d = 1
                    }
                }
            States.WRITE_BYTE:
                sda = data.q[7] ? bz : 0
                enabled = ~data.q[7]
                if (clkFall) {
                    bitCtr.d = bitCtr.q + 1
                    data.d = c{data.q[6:0], 1bx}
                    if (bitCtr.q == 7) {
                        state.d = States.READ_ACK
                    }
                }
            States.READ_ACK:
                if (clkRise) {
                    writeAck.d = !sdaSync.q[2]
                    ack = sdaSync.q[2]
                    next = 1
                    captureTx.d = 1
                    state.d = States.READ_ACK_WAIT
                }
            States.READ_ACK_WAIT:
                if (clkFall) {
                    if (writeAck.q)
                        state.d = txFlag.q ? States.WRITE_BYTE : States.READ_BYTE
                    else
                        state.d = States.IDLE
                }

        }

        if (captureTx.q) {
            captureTx.d = 0
            txFlag.d = txEnable
            if (txEnable)
                data.d = txData
        }

        if (sclSync.q[2]) {
            if (sdaSync.q[2] && !sdaSync.q[1]) { // falling edge
                // start condition
                state.d = States.WAIT_ID
                bitCtr.d = 0
            } else if (!sdaSync.q[2] && sdaSync.q[1]) { // rising edge
                // stop condition
                state.d = States.IDLE
                stop = 1
            }
        }
    }
}