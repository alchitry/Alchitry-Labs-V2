/**
    "name": "SPI Peripheral"
    "description": "SPI peripheral (slave). It has configurable CPOL and CPHA."
**/
/******************************************************************************

   The MIT License (MIT)

   Copyright (c) 2025 Alchitry

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   THE SOFTWARE.

   ****************************************************************************

   This module works well for slower SPI buses. The frequency of sck must be at
   most 1/16th of the frequency of clk. With a clk frequency of 100MHz, sck must
   not exceed 6.25MHz. For faster clocks, see the spi_fast_peripheral which comes
   with its own tradeoffs.

   Data to be sent out is saved on the falling edge of cs as well as at the end
   of each byte on the cycle that data_out_valid is high.
*/

module spi_peripheral #(
    // clock polarity, 0 = inactive low, 1 = inactive high
    CPOL = 0 : CPOL == 0 || CPOL == 1,

    // clock phase, 0 = valid on leading edge, 1 = valid on trailing edge
    CPHA = 0 : CPHA == 0 || CPHA == 1
)(
    input clk,             // clock
    input rst,             // reset
    input cs,              // SPI chip select
    input sdi,             // SPI data in
    output sdo,            // SPI data out
    input sck,             // SPI SCK
    output cs_sync,        // CS synced to system clock
    input data_in[8],      // data to send
    output data_out_valid, // data_out is valid
    output data_out[8]     // data received
) {

    .clk(clk) {
        .rst(rst) {
            dff bit_ct[3]         // bit counter
            dff data_in_shift[8]  // received data
            dff data_out_shift[8] // transmit data
        }
        dff sdi_reg[3]       // input buffer
        dff sck_reg[4]       // sck buffer
        dff cs_reg[3]        // cs buffer
        dff done_reg         // done buffer
    }

    always {
        // connect to buffer output
        sdo = data_in_shift.q[-1]
        data_out_valid = done_reg.q
        data_out = data_out_shift.q

        // read in buffered inputs
        cs_reg.d = c{cs_reg.q[-2:0], cs}
        sdi_reg.d = c{sdi_reg.q[-2:0], sdi}
        sck_reg.d = c{sck_reg.q[-2:0], sck} // save old sck

        cs_sync = cs_reg.q[-1]

        done_reg.d = 0 // default to not done

        if (cs_reg.q[-1]) { // not selected
            bit_ct.d = 0              // reset counter
            data_in_shift.d = data_in // copy in data for next byte
        } else {
            // When CPOL and CPHA are different, we read on the falling edge.
            // When they are the same we read on the rising edge.
            // Therefore we can use XOR to check that and invert the
            // edge detector. If you XOR with 1, the bit is flipped.

            if (sck_reg.q[-1:-2] == (b01 ^ 2x{CPOL^CPHA})) { // reading edge

                // read in the bit
                data_out_shift.d = c{data_out_shift.q[6:0], sdi_reg.q[-1]}

                // increment the bit counter
                bit_ct.d = bit_ct.q + 1

                // if we read the last bit
                if (bit_ct.q == 7) {
                    done_reg.d = 1   // signal we are done
                }
            } else if (sck_reg.q[-1:-2] == (b10 ^ 2x{CPOL^CPHA})) { // writing edge
                // write a bit out
                if (bit_ct.q != 0) { // skip shift when bit_ct is 0 as new data was just loaded
                    data_in_shift.d = c{data_in_shift.q[-2:0], data_in_shift.q[0]}
                }
            }
        }
        if (done_reg.q) {
            data_in_shift.d = data_in // copy new data in
        }
    }
}