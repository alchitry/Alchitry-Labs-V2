/**
    "name": "UART Tx"
    "description": "UART (Serial) transmitter with configurable baud rate."
**/
/******************************************************************************

    The MIT License (MIT)

    Copyright (c) 2024 Alchitry

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.

    *****************************************************************************/

module uart_tx #(
    CLK_FREQ ~ 100_000_000 : CLK_FREQ > 0,            // clock frequency
    BAUD ~ 1_000_000 : BAUD > 0 && BAUD <= CLK_FREQ/2 // desired baud rate
)(
    input clk,          // clock
    input rst,          // reset active high
    output tx,          // TX output
    input block,        // block transmissions
    output busy,        // module is busy when 1
    input data[8],      // data to send
    input new_data      // flag for new data
) {

    const CLK_PER_BIT = (CLK_FREQ + BAUD) / BAUD - 1 // clock cycles per bit
    const CTR_SIZE = $clog2(CLK_PER_BIT) // bits required to store CLK_PER_BIT - 1

    enum States { IDLE, START_BIT, DATA, STOP_BIT }

    .clk(clk) {
        .rst(rst) {
            dff state[$width(States)](#INIT(States.IDLE)) // FSM for transmitter
        }
        dff ctr[CTR_SIZE]  // delay counter
        dff bit_ctr[3]     // bit counter
        dff saved_data[8]  // transmission data
        dff tx_reg         // output buffer
        dff block_flag     // input buffer
    }

    always {
        // Outputs
        tx = tx_reg.q
        busy = 1                            // default to 1

        block_flag.d = block                 // connect to buffer

        /* When a new byte is presented to send, that byte is saved so that
            if the input changes the correct data is still sent. We first
            have to send a 0, which is the start bit. Once the start bit
            is sent, each data bit is sent out. The counter ctr is used to
            delay between bits to get the correct baud rate. The counter
            bit_counter is used to keep track of what bit to send. After
            all eight bits are sent, we need to send 1, the stop bit.
            This bit ensures that the line goes high between transmissions.
            When the transmitter is sending out data, the output busy is
            set to 1. To prevent the transmitter from sending data, set
            block to 1. This can be used for flow control.                  */

        case (state.q) {                           // FSM
            States.IDLE:
                tx_reg.d = 1                       // idle high (UART standard)
                if (!block_flag.q) {
                    busy = 0                       // not busy
                    bit_ctr.d = 0                  // reset counter
                    ctr.d = 0                      // reset counter
                    if (new_data) {                // request to send data?
                        saved_data.d = data        // save the data
                        state.d = States.START_BIT // switch states
                    }
                }

            States.START_BIT:
                ctr.d = ctr.q + 1               // increment counter
                tx_reg.d = 0                    // start bit is low
                if (ctr.q == CLK_PER_BIT - 1){  // if ctr is the max value
                    ctr.d = 0                   // reset counter
                    state.d = States.DATA       // switch states
                }

            States.DATA:
                tx_reg.d = saved_data.q[bit_ctr.q] // output the data bit
                ctr.d = ctr.q + 1                  // increment counter
                if (ctr.q == CLK_PER_BIT - 1) {    // if ctr is the max value
                    ctr.d = 0                      // reset counter
                    bit_ctr.d = bit_ctr.q + 1      // increase bit counter
                    if (bit_ctr.q == 7)            // if we have sent all the bits
                        state.d = States.STOP_BIT  // switch states
                }

            States.STOP_BIT:
                tx_reg.d = 1                     // stop bit is high
                ctr.d = ctr.q + 1                // increase counter
                if (ctr.q == CLK_PER_BIT - 1) {  // if ctr is the max value
                    state.d = States.IDLE        // switch states
                }

            default: state.d = States.IDLE       // if state is invalid reset to idle
        }
    }
}