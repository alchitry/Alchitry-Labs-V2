/**
    "name": "I2C Controller"
    "description": "I2C controller (master) that can be used to talk to I2C devices. It has a configurable clock divider."
**/
/******************************************************************************

   The MIT License (MIT)

   Copyright (c) 2019 Alchitry

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   THE SOFTWARE.

   *****************************************************************************

   I2C Controller: This is an I2C controller interface. With this
   you can communicate to multiple I2C peripheral devices.

   Each I2C transaction begins with the start event. This
   is triggered by setting the start input high for one
   clock cycle. You can then send as many read and write
   commands as you want. To end a transaction, you need
   to set the stop input high for one clock cycle.

   Each time a command is sent (start, stop,
   read, or write) you must make sure the busy flag is
   not set before issuing the command. Otherwise, your
   command will be ignored.

   Typically, a transaction will start by writing a byte
   that contains the ID of the device to talk to and
   if the operation is a read or write to it. See your
   device's datasheet for what to send.

   After that, multiple reads or writes can take place
   depending on the operation.

   When performing a read, you must specify if the read
   should be acknowledged by setting ackRead to 1 to
   acknowledge or 0 to not.

   When performing a write, ackWrite will tell if your
   write was acknowledged by the peripheral device.
*/

module i2cController #(
    CLK_DIV = 8 : CLK_DIV >= 3 // divide clock by 2^CLK_DIV, must be 3 or more
)(
    input clk,          // clock
    input rst,          // reset

    // Device interface
    inout sda,          // bi-directional
    output scl,         // data clock

    // Control signals
    input start,        // send start signal
    input stop,         // send stop signal

    // Write interface
    input dataIn[8],    // data to write
    input write,        // start write signal (1 = start write)
    output ackWrite,    // was the last write acknowledged (1 = ack, 0 = no_ack)

    // Read interface
    output dataOut[8],  // data read
    output outValid,    // output valid (1 = valid)
    input read,         // start read signal (1 = start read)
    input ackRead,      // should read be acknowledged (1 = ack, 0 = no ack)

    // Status
    output busy         // I2C is busy (1 = busy, 0 = idle)
) {
    enum States {IDLE, START, WAIT_CMD, READ, WRITE, STOP, WAIT}

    .clk(clk){
        .rst(rst) {
            dff state[$width(States)]
        }
        dff data[8]         // data to send or data received
        dff outValidReg     // outValid buffer
        dff sclReg[CLK_DIV] // clock divider
        dff bitCtr[4]       // bit counter
        dff ackWriteReg     // ackWrite buffer
        dff ackReadReg      // ackRead buffer
    }

    sig sdaValue

    always {
        // the clock is the MSB of sclReg inverted
        scl = ~sclReg.q[CLK_DIV - 1]

        // we are busy if we aren't idle or waiting for a command
        busy = state.q != States.IDLE && state.q != States.WAIT_CMD

        // write the outputs
        dataOut = data.q
        outValid = outValidReg.q
        ackWrite = ackWriteReg.q

        // defaults
        outValidReg.d = 0 // not valid
        sdaValue = 1 // default to floating pin

        case (state.q) {
            // Start here
            States.IDLE:
                sclReg.d = 0  // reset clock counter (clock goes high)

                // if we have a start command
                if (start) {
                    state.d = States.START // go to start state
                }

            // Send start command
            States.START:
                sclReg.d = sclReg.q + 1 // increment the counter

                // if the clock counter is less than 1/4 full or more than 3/4 full
                if (sclReg.q < c{2b01, ($width(sclReg.q)-2)x{1b0}} || sclReg.q > c{2b11, ($width(sclReg.q)-2)x{1b0}})
                    sdaValue = 1             // float output
                else
                    sdaValue = 0             // pull low

                // if the clock counter is 3/4 full
                if (sclReg.q == c{2b11, ($width(sclReg.q)-2)x{1b0}})
                    state.d = States.WAIT_CMD // enter wait command state

            // Wait for read or write command
            States.WAIT_CMD:
                bitCtr.d = 0 // reset bit counter

                // set clock counter to just over half full
                sclReg.d = c{1b1, ($width(sclReg.q)-1)x{1b0}} + 1

                if (write) { // new write command
                    data.d = dataIn // save the data to send

                    // set clock counter to just over 3/4 full
                    sclReg.d = c{2b11, ($width(sclReg.q)-2)x{1b0}} + 1
                    state.d = States.WRITE // enter write state

                } else if (read) {           // new read command
                    ackReadReg.d = ackRead   // save if read should be acknowledged
                    state.d = States.READ    // enter read state
                } else if (stop) {           // stop command
                    state.d = States.STOP    // enter stop state
                } else if (start) {          // start command
                    state.d = States.START   // enter start state

                    // set clock to just over 3/4 full so it starts low
                    sclReg.d = c{2b11, ($width(sclReg.q)-2)x{1b0}} + 1
                }

            // Read in a byte
            States.READ:
                // if we at the end of the 8th bit or later
                if (bitCtr.q == 9 || (bitCtr.q > 7 && sclReg.q >= c{2b11, ($width(sclReg.q)-2)x{1b0}})) {
                    sdaValue = ~ackReadReg.q // write the acknowledge bit
                }

                // increment the clock counter
                sclReg.d = sclReg.q + 1

                // if the clock is 0
                if (sclReg.q == 0) {
                    // if it's a data bit
                    if (bitCtr.q < 8)
                        data.d = c{data.q[6:0], sda} // shift it in

                    // increment the bit counter
                    bitCtr.d = bitCtr.q + 1

                    // otherwise, if the clock counter if half full and we're on the 9th bit
                } else if (sclReg.q == c{1b1, ($width(sclReg.q)-1)x{1b0}} && bitCtr.q == 9) {
                    outValidReg.d = 1      // output data is valid
                    state.d = States.WAIT_CMD // wait for next command
                }

            // Write a byte
            States.WRITE:
                // if we aren't on the acknowledge bit
                if (bitCtr.q != 8)
                    sdaValue = data.q[7]     // write the MSB of data

                // otherwise, if the clock counter is 0
                else if (sclReg.q == 0)
                    ackWriteReg.d = sda // read the acknowledge bit

                // increment the clock counter
                sclReg.d = sclReg.q + 1

                // if the clock counter is 3/4 full
                if (sclReg.q ==  c{2b11, ($width(sclReg.q)-2)x{1b0}}) {
                    // shift data
                    data.d = c{data.q[6:0], 1bx}

                    // increment the bit counter
                    bitCtr.d = bitCtr.q + 1

                    // if we're on the last bit
                    if (bitCtr.q == 8)
                        state.d = States.WAIT_CMD // wait for the next command
                }

            // Send stop command
            States.STOP:
                sdaValue = 0
                sclReg.d = sclReg.q + 1 // increment the clock counter

                // if the clock counter is just under half full
                // We don't want it to reach 1/2 full because
                // the clock output would then go low
                if (sclReg.q == ($width(sclReg.q)-1)x{1b1}) {
                    sdaValue = 1          // set the output high
                    state.d = States.WAIT // enter wait state
                    sclReg.d = 0          // reset clock counter
                }

            // Wait 1/2 a clock period
            States.WAIT:
                sclReg.d = sclReg.q + 1 // increment the clock counter

                // if the clock counter is just under half full
                // We don't want it to reach 1/2 full because
                // the clock output would then go low
                if (sclReg.q == ($width(sclReg.q)-1)x{1b1}){
                    state.d = States.IDLE // enter idle state
                    sclReg.d = 0          // reset clock counter
                }

            // Should never enter here
            default:
                state.d = States.IDLE // reset to idle if we do
        }

        // default values
        sda = sdaValue == 0 ? b0 : bz // only pull down
    }
}