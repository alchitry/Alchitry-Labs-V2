/**
    "name": "SPI Peripheral"
    "description": "SPI peripheral (slave). It has configurable CPOL and CPHA."
**/
/******************************************************************************

   The MIT License (MIT)

   Copyright (c) 2019 Alchitry

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   THE SOFTWARE.

   *****************************************************************************/

module spiPeripheral #(
    // clock polarity, 0 = inactive low, 1 = inactive high
    CPOL = 0 : CPOL == 0 || CPOL == 1,

    // clock phase, 0 = valid on leading edge, 1 = valid on trailing edge
    CPHA = 0 : CPHA == 0 || CPHA == 1
)(
    input clk,          // clock
    input rst,          // reset
    input cs,           // SPI chip select
    input sdi,          // SPI data in
    output sdo,         // SPI data out
    input sck,          // SPI SCK
    output done,        // transfer done
    input dataIn[8],    // data to send
    output dataOut[8]   // data received
) {

    .clk(clk) {
        .rst(rst) {
            dff bitCt[3]      // bit counter
            dff data[8]       // received data
        }
        dff sdiReg          // input buffer
        dff sdoReg          // output buffer
        dff sckReg[2]       // sck buffer
        dff csReg           // cs buffer
        dff dataOutReg[8]   // dataOut buffer
        dff doneReg         // done buffer
    }

    always {
        // connect to buffer output
        sdo = sdoReg.q
        done = doneReg.q
        dataOut = dataOutReg.q

        // read in buffered inputs
        csReg.d = cs
        sdiReg.d = sdi
        sckReg.d = c{sckReg.q[0], sck} // save old sck

        doneReg.d = 0 // default to not done

        if (csReg.q) { // not selected
            bitCt.d = 3b111        // reset counter
            data.d = dataIn        // copy in data for next byte
            sdoReg.d = dataIn[7]   // write first bit out
        } else {
            // When CPOL and CPHA are different, we read on the falling edge.
            // When they are the same we read on the rising edge.
            // Therefore we can use XOR to check that and invert the
            // edge detector. If you XOR with 1, the bit is flipped.

            if (sckReg.q == (b01 ^ 2x{CPOL^CPHA})) { // reading edge

                // read in the bit
                dataOutReg.d[bitCt.q] = sdiReg.q

                // increment the bit counter
                bitCt.d = bitCt.q - 1

                // if we read the last bit
                if (bitCt.q == b0) {
                    doneReg.d = 1   // signal we are done
                    data.d = dataIn // copy new data in
                }
            } else if (sckReg.q == (b10 ^ 2x{CPOL^CPHA})) { // writing edge
                    // write a bit out
                    sdoReg.d = data.q[bitCt.q]
                }
        }
    }
}