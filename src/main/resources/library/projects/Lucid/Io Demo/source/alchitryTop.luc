module alchitryTop (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led[8],          // 8 user controllable LEDs
    input usbRx,            // USB->Serial input
    output usbTx,           // USB->Serial output
    output ioLed[3][8],     // LEDs on IO Shield
    output ioSeg[8],        // 7-segment LEDs on IO Shield
    output ioSel[4],        // Digit select on IO Shield
    input ioButton[5],      // 5 buttons on IO Shield
    input ioDip[3][8]       // DIP switches on IO Shield
) {
    
    sig rst                 // reset signal
    
    .clk(clk) {
        // The reset conditioner is used to synchronize the reset signal to the FPGA
        // clock. This ensures the entire FPGA comes out of reset at the same time.
        resetConditioner resetCond
        
        edgeDetector edgeDetector(#RISE(1), #FALL(0))
        
        .rst(rst) {
            // Reduce DIV values for simulation so it doesn't take forever
            multiSevenSeg seg (#DIV($isSim() ? 1 : 16), #DIGITS(4))
            multiDecimalCounter decCtr (#DIGITS(4))
            counter ctr (#SIZE(1), #DIV($isSim() ? 8 : 24))
        }
    }
    
    always {
        resetCond.in = ~rst_n  // input raw inverted reset signal
        rst = resetCond.out    // conditioned reset
        
        led = c{3b0, ioButton} // connect buttons to LEDs
        
        usbTx = usbRx          // loop serial port
        
        edgeDetector.in = ctr.value
        decCtr.inc = edgeDetector.out
        seg.values = decCtr.digits
        
        ioSeg = ~seg.seg // connect segments to the driver
        ioSel = ~seg.sel // connect digit select to the driver
        
        ioLed = ioDip    // connect the DIP switches to the LEDs
    }
}