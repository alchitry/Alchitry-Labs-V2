module alchitryTop (
    input clk,              // 100MHz clock
    input rstN,            // reset button (active low)
    output led[8],          // 8 user controllable LEDs
    input usbRx,            // USB->Serial input
    output usbTx            // USB->Serial output
) {
    
    sig rst                 // reset signal
    
    .clk(clk) {
        // The reset conditioner is used to synchronize the reset signal to the FPGA
        // clock. This ensures the entire FPGA comes out of reset at the same time.
        resetConditioner resetCond
        
        .rst(rst) {
            greeter greeter // instance of our greeter
            uartRx uartRx(#BAUD(1000000), #CLK_FREQ(100000000))
            uartTx uartTx(#BAUD(1000000), #CLK_FREQ(100000000))
        }
    }
    
    always {
        resetCond.in = ~rstN     // input raw inverted reset signal
        rst = resetCond.out       // conditioned reset
        
        led = 8h00             // turn LEDs off
        
        usbTx = uartTx.tx    // connect the output
        uartRx.rx = usbRx    // connect the input
        
        // TX Connections
        uartTx.block = 0      // don't block
        greeter.txBusy = uartTx.busy
        uartTx.newData = greeter.newTx
        uartTx.data = greeter.txData
        
        // RX Connections
        greeter.newRx = uartRx.newData
        greeter.rxData = uartRx.data
    }
}