module alchitry_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led[8],          // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    input ft_clk,           // Ft 100MHz clock
    input ft_rxf,           // Ft Rx Full (0 = data in rx buffer)
    input ft_txe,           // Ft Tx Empty (0 = space in tx buffer)
    inout ft_data[16],      // Ft data bus
    inout ft_be[2],         // Ft byte enable
    output ft_rd,           // Ft read flag (0 = read)
    output ft_wr,           // Ft write flag (0 = write)
    output ft_oe,           // Ft output enable (0 = Ft, 1 = FPGA drives bus)
    output ft_wakeup,       // Ft USB wakeup (0 = trigger wakeup)
    output ft_reset         // Ft reset (active low)
) {

    sig rst // reset signal

    .clk(clk) {
        // The reset conditioner is used to synchronize the reset signal to the FPGA
        // clock. This ensures the entire FPGA comes out of reset at the same time.
        reset_conditioner reset_cond

        .rst(rst) {
            ft ft(#BUS_WIDTH(16), #TX_BUFFER(256), #RX_BUFFER(256), .ft_clk(ft_clk), .ft_data(ft_data), .ft_be(ft_be))
        }
    }

    always {
        reset_cond.in = ~rst_n  // input raw inverted reset signal
        rst = reset_cond.out    // conditioned reset

        led = c{ft_txe, ft_rxf, ft.ui_dout_empty, ft.ui_din_full}

        usb_tx = usb_rx         // echo the serial data

        ft.ft_rxf = ft_rxf
        ft.ft_txe = ft_txe
        ft_rd = ft.ft_rd
        ft_wr = ft.ft_wr
        ft_oe = ft.ft_oe

        ft_wakeup = 1
        ft_reset = !rst

        // echo data back
        ft.ui_dout_get = !ft.ui_din_full
        ft.ui_din_valid = !ft.ui_dout_empty
        ft.ui_din = ft.ui_dout
        ft.ui_din_be = ft.ui_dout_be
    }
}