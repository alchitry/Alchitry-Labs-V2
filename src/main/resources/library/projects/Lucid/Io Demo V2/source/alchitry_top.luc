module alchitry_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led[8],          // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led[3][8],    // LEDs on IO Shield
    output io_segment[8],   // 7-segment LEDs on IO Shield
    output io_select[4],    // Digit select on IO Shield
    input io_button[5],     // 5 buttons on IO Shield
    input io_dip[3][8]      // DIP switches on IO Shield
) {
    
    sig rst                 // reset signal
    
    .clk(clk) {
        // The reset conditioner is used to synchronize the reset signal to the FPGA
        // clock. This ensures the entire FPGA comes out of reset at the same time.
        reset_conditioner reset_cond
        
        edge_detector edge_detector(#RISE(1), #FALL(0))
        
        .rst(rst) {
            // Reduce DIV values for simulation so it doesn't take forever
            multi_seven_seg seg (#DIV($is_sim() ? 1 : 16), #DIGITS(4))
            multi_decimal_counter dec_ctr (#DIGITS(4))
            counter ctr (#SIZE(1), #DIV($is_sim() ? 8 : 24))
        }
    }
    
    always {
        reset_cond.in = ~rst_n  // input raw inverted reset signal
        rst = reset_cond.out    // conditioned reset
        
        led = c{3b0, io_button} // connect buttons to LEDs
        
        usb_tx = usb_rx         // loop serial port
        
        edge_detector.in = ctr.value
        dec_ctr.inc = edge_detector.out
        seg.values = dec_ctr.digits
        
        io_segment = ~seg.seg // connect segments to the driver
        io_select = ~seg.sel  // connect digit select to the driver
        
        io_led = io_dip       // connect the DIP switches to the LEDs
    }
}