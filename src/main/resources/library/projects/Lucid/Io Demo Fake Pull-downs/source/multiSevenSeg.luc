module multiSevenSeg #(
    DIGITS = 4 : DIGITS > 0,
    DIV = $isSim() ? 0 : 16 : DIV >= 0
)(
    input clk,                // clock
    input rst,                // reset
    input values[DIGITS][4],  // values to show
    output seg[7],            // LED segments
    output sel[DIGITS]        // Digit select
) {
    
    // number of bits required to store DIGITS-1
    const DIGIT_BITS = $clog2(DIGITS)
    
    .clk(clk), .rst(rst) {
        counter ctr (#DIV(DIV), #SIZE(DIGIT_BITS), #TOP(DIGITS-1)) 
    }
    
    sevenSeg segDec                        // segment decoder
    decoder digitDec(#WIDTH(DIGIT_BITS))   // digit decoder

    always {
        segDec.char = values[ctr.value]    // select the value for the active digit
        seg = segDec.segs                  // output the decoded value

        digitDec.in = ctr.value            // decode active digit to one-hot
        sel = digitDec.out                 // output the active digit
    }
}