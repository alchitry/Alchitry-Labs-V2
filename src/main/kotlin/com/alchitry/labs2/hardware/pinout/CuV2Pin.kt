package com.alchitry.labs2.hardware.pinout

import com.alchitry.labs2.parsers.acf.types.Ice40IoStandard

enum class CuV2Pin(override val fpgaPin: String, override val bank: Int) : Pin {
    A3("C1", 3),
    A4("H3", 3),
    A5("D3", 3),
    A6("J1", 3),
    A9("B1", 3),
    A10("G3", 3),
    A11("A1", 0),
    A12("F3", 3),
    A15("D4", 3),
    A16("F4", 3),
    A17("A2", 0),
    A18("E1", 3),
    A21("C3", 3),
    A22("E4", 3),
    A23("A3", 0),
    A24("D1", 3),
    A27("C4", 0),
    A28("H4", 3),
    A29("A4", 0),
    A30("G4", 3),
    A33("C5", 0),
    A34("D5", 0),
    A35("A5", 0),
    A36("D6", 0),
    A39("C6", 0),
    A40("D7", 0),
    A41("A6", 0),
    A42("H1", 3),
    A45("C7", 0),
    A46("D9", 0),
    A47("A7", 0),
    A48("G1", 3),
    A51("A10", 0),
    A52("D10", 0),
    A53("C9", 0),
    A54("D11", 0),
    A57("A11", 0),
    A58("E11", 1),
    A59("C10", 0),
    A60("F11", 1),
    A63("A12", 0),
    A64("G11", 1),
    A65("C11", 0),
    A66("H11", 1),
    A69("C12", 0),
    A70("E12", 1),
    A71("B14", 1),
    A72("D14", 1),
    A75("D12", 1),
    A76("F12", 1),
    A77("C14", 1),
    A78("E14", 1),
    B3("L1", 3),
    B4("P2", 2),
    B5("J3", 3),
    B6("L4", 2),
    B9("M1", 3),
    B10("P3", 2),
    B11("K3", 3),
    B12("M4", 2),
    B15("N1", 3),
    B16("P4", 2),
    B17("P1", 3),
    B18("M6", 2),
    B21("M3", 2),
    B22("P5", 2),
    B23("K4", 3),
    B24("M7", 2),
    B27("L5", 2),
    B28("P9", 2),
    B29("L6", 2),
    B30("M12", 1),
    B33("N14", 1),
    B34("L9", 2),
    B35("L12", 1),
    B36("P10", 2),
    B39("L8", 2),
    B41("G14", 1),
    B42("F14", 1),
    LED0("J11", 1),
    LED1("K11", 1),
    LED2("G12", 1),
    LED3("H12", 1),
    LED4("K14", 1),
    LED5("J12", 1),
    LED6("L14", 1),
    LED7("K12", 1),
    RESET("P8", 2),
    CLOCK("P7", 2),
    USB_RX("P14", 1),
    USB_TX("M9", 2),
    SPI_MOSI("M11", 2),
    SPI_MISO("P11", 2),
    SPI_SCK("P12", 2),
    SPI_SS("P13", 2);

    companion object : PinConverter {
        override val boardSide = BoardSide.TOP
        override val version = ConverterVersion.V2
        override val standards = Ice40IoStandard.entries
        override fun bankToVcco(bank: Int): List<String> = when (bank) {
            0, 1, 2, 3 -> listOf("3.3")
            else -> error("Unknown bank: $bank")
        }

        override fun acfToPin(name: String): CuV2Pin? = entries.firstOrNull { it.name == name }

    }
}