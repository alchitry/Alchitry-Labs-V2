package com.alchitry.labs2.hardware.pinout

import com.alchitry.labs2.parsers.acf.types.Artix7IoStandard

enum class AuV2Pin(override val fpgaPin: String, override val bank: Int) : Pin {
    A3("N6", 14),
    A4("P9", 14),
    A5("M6", 14),
    A6("N9", 14),
    A9("J1", 35),
    A10("L2", 35),
    A11("K1", 35),
    A12("L3", 35),
    A15("H1", 35),
    A16("K2", 35),
    A17("H2", 35),
    A18("K3", 35),
    A21("E1", 35),
    A22("H3", 35),
    A23("F2", 35),
    A24("J3", 35),
    A27("G4", 35),
    A28("H4", 35),
    A29("G5", 35),
    A30("H5", 35),
    A33("G1", 35),
    A34("J4", 35),
    A35("G2", 35),
    A36("J5", 35),
    A39("C4", 35),
    A40("D3", 35),
    A41("D4", 35),
    A42("E3", 35),
    A45("E5", 35),
    A46("F3", 35),
    A47("F5", 35),
    A48("F4", 35),
    A51("A3", 35),
    A52("D5", 35),
    A53("B4", 35),
    A54("D6", 35),
    A57("A4", 35),
    A58("B1", 35),
    A59("A5", 35),
    A60("C1", 35),
    A63("D1", 35),
    A64("A2", 35),
    A65("E2", 35),
    A66("B2", 35),
    A69("C2", 35),
    A70("C6", 35),
    A71("C3", 35),
    A72("C7", 35),
    A75("B5", 35),
    A76("A7", 35),
    A77("B6", 35),
    A78("B7", 35),
    B3("T8", 14),
    B4("T10", 14),
    B5("T7", 14),
    B6("T9", 14),
    B9("T5", 14),
    B10("T12", 14),
    B11("R5", 14),
    B12("R12", 14),
    B15("R7", 14),
    B16("T13", 14),
    B17("R6", 14),
    B18("R13", 14),
    B21("R8", 14),
    B22("T15", 14),
    B23("P8", 14),
    B24("T14", 14),
    B27("R11", 14),
    B28("R16", 14),
    B29("R10", 14),
    B30("R15", 14),
    B33("K5", 35),
    B34("N16", 14),
    B35("E6", 35),
    B36("M16", 14),
    B39("P11", 14),
    B40("P13", 14),
    B41("P10", 14),
    B42("N13", 14),
    B45("N12", 14),
    B46("D9", 15),
    B47("N11", 14),
    B48("D10", 15),
    B51("M1", 34),
    B52("P1", 34),
    B53("M2", 34),
    B54("N1", 34),
    B57("N2", 34),
    B58("R1", 34),
    B59("N3", 34),
    B60("R2", 34),
    B63("P3", 34),
    B64("T2", 34),
    B65("P4", 34),
    B66("R3", 34),
    B69("M4", 34),
    B70("T3", 34),
    B71("L4", 34),
    B72("T4", 34),
    B75("L5", 34),
    B76("N4", 34),
    B77("P5", 34),
    B78("M5", 34),
    LED0("K13", 14),
    LED1("K12", 14),
    LED2("L14", 14),
    LED3("L13", 14),
    LED4("M15", 14),
    LED5("M14", 14),
    LED6("M12", 14),
    LED7("P14", 14),
    RESET("P6", 14),
    CLOCK("N14", 14),
    VP("H8", 0),
    VN("J7", 0),
    USB_RX("P15", 14),
    USB_TX("P16", 14),
    SPI_D0("J13", 14),
    SPI_D1("J14", 14),
    SPI_D2("K15", 14),
    SPI_D3("K16", 14),
    SPI_SCK("E8", 14),
    SPI_SS("L12", 14),
    DDR_DQ0("A13", 15),
    DDR_DQ1("B16", 15),
    DDR_DQ2("B14", 15),
    DDR_DQ3("C11", 15),
    DDR_DQ4("C13", 15),
    DDR_DQ5("C16", 15),
    DDR_DQ6("C12", 15),
    DDR_DQ7("C14", 15),
    DDR_DQ8("D8", 15),
    DDR_DQ9("B11", 15),
    DDR_DQ10("C8", 15),
    DDR_DQ11("B10", 15),
    DDR_DQ12("A12", 15),
    DDR_DQ13("A8", 15),
    DDR_DQ14("B12", 15),
    DDR_DQ15("A9", 15),
    DDR_DQS0_P("B15", 15),
    DDR_DQS0_N("A15", 15),
    DDR_DQS1_P("B9", 15),
    DDR_DQS1_N("A10", 15),
    DDR_DM0("A14", 15),
    DDR_DM1("C9", 15),
    DDR_ODT("G11", 15),
    DDR_RESET("D13", 15),
    DDR_BA0("E13", 15),
    DDR_BA1("F15", 15),
    DDR_BA2("E15", 15),
    DDR_CK_P("G14", 15),
    DDR_CK_N("F14", 15),
    DDR_CKE("D15", 15),
    DDR_CS("D16", 15),
    DDR_RAS("D11", 15),
    DDR_CAS("D14", 15),
    DDR_WE("E11", 15),
    DDR_A0("F12", 15),
    DDR_A1("G16", 15),
    DDR_A2("G15", 15),
    DDR_A3("E16", 15),
    DDR_A4("H11", 15),
    DDR_A5("G12", 15),
    DDR_A6("H16", 15),
    DDR_A7("H12", 15),
    DDR_A8("J16", 15),
    DDR_A9("H13", 15),
    DDR_A10("E12", 15),
    DDR_A11("H14", 15),
    DDR_A12("F13", 15),
    DDR_A13("J15", 15);

    companion object : PinConverter {
        override val boardSide = BoardSide.TOP
        override val version = ConverterVersion.V2
        override val standards = Artix7IoStandard.entries
        override fun acfToPin(name: String): AuV2Pin? = entries.firstOrNull { it.name == name }

        override fun bankToVcco(bank: Int): List<String> = when (bank) {
            0 -> emptyList()
            15 -> listOf("1.35")
            14, 35 -> listOf("3.3")
            34 -> listOf("3.3", "2.5", "1.8")
            else -> error("Unknown bank: $bank")
        }
    }
}