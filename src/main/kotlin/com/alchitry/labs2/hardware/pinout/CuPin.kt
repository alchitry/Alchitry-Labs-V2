package com.alchitry.labs2.hardware.pinout

import com.alchitry.labs2.parsers.acf.types.Ice40IoStandard

enum class CuPin(override val fpgaPin: String, override val bank: Int) : Pin {
    A2("M1", 3),
    A3("L1", 3),
    A5("J1", 3),
    A6("J3", 3),
    A8("G1", 3),
    A9("G3", 3),
    A11("E1", 3),
    A12("D1", 3),
    A14("C1", 3),
    A15("B1", 3),
    A17("D3", 3),
    A18("C3", 3),
    A20("A1", 0),
    A21("A2", 0),
    A23("A3", 0),
    A24("A4", 0),
    A27("A5", 0),
    A28("C5", 0),
    A30("D5", 0),
    A31("C4", 0),
    A33("D4", 3),
    A34("E4", 3),
    A36("F4", 3),
    A37("F3", 3),
    A39("H4", 3),
    A40("G4", 3),
    A42("H1", 3),
    A43("H3", 3),
    A45("K3", 3),
    A46("K4", 3),
    A48("N1", 3),
    A49("P1", 3),
    B2("A6", 0),
    B3("A7", 0),
    B5("A10", 0),
    B6("A11", 0),
    B8("C9", 0),
    B9("C10", 0),
    B11("A12", 0),
    B12("B14", 1),
    B14("C14", 1),
    B15("D14", 1),
    B17("E14", 1),
    B18("E12", 1),
    B20("F14", 1),
    B21("G14", 1),
    B23("H12", 1),
    B24("J12", 1),
    B27("H11", 1),
    B28("G11", 1),
    B30("G12", 1),
    B31("F12", 1),
    B33("F11", 1),
    B34("E11", 1),
    B36("D12", 1),
    B37("D11", 0),
    B39("C12", 0),
    B40("C11", 0),
    B42("D10", 0),
    B43("D9", 0),
    B45("D7", 0),
    B46("D6", 0),
    B48("C7", 0),
    B49("C6", 0),
    C2("M3", 2),
    C3("M4", 2),
    C5("L4", 2),
    C6("L5", 2),
    C8("M6", 2),
    C9("M7", 2),
    C11("L9", 2),
    C39("P10", 2),
    C40("P9", 2),
    C42("L8", 2),
    C43("L6", 2),
    C45("P5", 2),
    C46("P4", 2),
    C48("P3", 2),
    C49("P2", 2),
    LED0("J11", 1),
    LED1("K11", 1),
    LED2("K12", 1),
    LED3("K14", 1),
    LED4("L12", 1),
    LED5("L14", 1),
    LED6("M12", 1),
    LED7("N14", 1),
    RESET("P8", 2),
    CLOCK("P7", 2),
    USB_RX("P14", 1),
    USB_TX("M9", 2),
    SPI_MOSI("M11", 2),
    SPI_MISO("P11", 2),
    SPI_SCK("P12", 2),
    SPI_SS("P13", 2);

    companion object : PinConverter {
        override val version = ConverterVersion.V1
        override val standards = Ice40IoStandard.entries
        override fun bankToVcco(bank: Int): List<String> = when (bank) {
            0, 1, 2, 3 -> listOf("3.3")
            else -> error("Unknown bank: $bank")
        }

        override fun acfToPin(name: String): CuPin? = entries.firstOrNull { it.name == name }

    }
}