package com.alchitry.labs.parsers.errors

import com.alchitry.labs.parsers.lucid.Lucid

object ErrorStrings {
    const val UNDECLARED_CONST = "This constant was not declared"
    const val UNDECLARED_NAME = "The name \"%s\" could not be resolved"
    const val UNDECLARED_MODULE = "The module \"%s\" could not be found"
    const val PARAMETER_CONSTRAINT_FAILED = "The constraint \"%s\" for parameter \"%s\" with value \"%s\" failed"
    const val PARAMETER_CONSTRAINT_PARSE_FAIL = "The constraint \"%s\" could not be parsed with value \"%s\""
    const val NUMBER_PARSE_FAIL = "The value \"%s\" could not be parsed"
    const val SIGNED_STRUCT = "Structs cannot be signed"
    const val DFF_MISSING_CLK = "The \"clk\" input to the DFF must be assigned"
    const val DFF_NO_SIG_SELECTED = "DFFs can not be accessed directly. You must select a signal with \".d\" or \".q\""
    const val DFF_INVALID_SIG = "The signal \"%s\" is not a valid DFF signal. Only \"d\" and \"q\" are valid signals"
    const val DFF_Q_ASSIGNED =
        "You can not assign a value to the \"q\" output of a DFF. You should assign values to the \"d\" input"
    const val DFF_D_READ = "The \"d\" input of a DFF can not be read. You should read the \"q\" output instead"
    const val DFF_UNKNOWN_INPUT = "The input \"%s\" does not belong to DFFs"
    const val DFF_UNKNOWN_PARAM = "The parameter \"%s\" does not belong to DFFs"
    const val FSM_MISSING_CLK = "The \"clk\" input to the FSM must be assigned"
    const val FSM_NO_SIG_SELECTED = "FSMs can not be accessed directly. You must select a signal with \".d\" or \".q\""
    const val FSM_INVALID_SIG = "The signal \"%s\" is not a valid FSM signal. Only \"d\" and \"q\" are valid signals"
    const val FSM_Q_ASSIGNED =
        "You can not assign a value to the \"q\" output of an FSM. You should assign values to the \"d\" input"
    const val FSM_D_READ = "The \"d\" input of an FSM can not be read. You should read the \"q\" output instead"
    const val FSM_UNKNOWN_INPUT = "The input \"%s\" does not belong to FSMs"
    const val FSM_UNKNOWN_PARAM = "The parameter \"%s\" does not belong to FSMs"
    const val FSM_INVALID_STATE = "The state \"%s\" does not belong to the FSM \"%s\""
    const val FSM_INVALID_STATE_NAME = "\"%s\" cannot be used as a state name"
    const val MISSPELLED = "Did you mean \"%s\"?"
    const val INOUT_CONNECTION_INDIRECT = "Inouts can only be accessed directly in port connections"
    const val INOUT_ACCESSED_DIRECTLY = "Inout signals cannot be accessed directly"
    const val INOUT_UNKNOWN_SIG = "\"%s\" is not part of inout signals"
    const val SIG_NOT_MODULE = "\"%s\" is a signal and has no sub-signals."
    const val VAR_NOT_MODULE = "\"%s\" is a variable so the \".\" operator cannot be used on it."
    const val NAME_TAKEN = "The name \"%s\" is already in use"
    const val SIG_UNDEFINED = "The signal \"%s\" does not belong to the signal \"%s\""
    const val MODULE_NAME_NOT_FILENAME = "The module name \"%s\" doesn't match the file name \"%s\""
    const val MODULE_NO_SIG_SELECTED =
        "Modules can not be accessed directly. You must select a signal with \".signame\" where \"signame\" is the name of an input or output of the module"
    const val MODULE_SIG_UNDEFINED = "The signal \"%s\" does not belong to the module type \"%s\""
    const val MODULE_UNKNOWN_PARAM = "The parameter \"%s\" does not belong to the module \"%s\""
    const val MODULE_UNKNOWN_INPUT = "The input \"%s\" does not belong to the module \"%s\""
    const val MODULE_PARAM_DEFINED = "The parameter \"%s\" was already defined"
    const val MODULE_INPUT_DEFINED = "The input \"%s\" was already defined"
    const val MODULE_INOUT_DEFINED = "The inout \"%s\" was already defined"
    const val MODULE_INOUT_CONNECT_ONLY_INOUT = "Inouts can only be directly connected to another inout"
    const val MODULE_MISSING_REQ_PARAM = "The required parameter \"%s\" was not specified"
    const val MODULE_MISSING_REQ_PARAMS = "The required parameters \"%s\" were not specified"
    const val MODULE_DIM_PARSE_FALIED = "Could not determine the dimensions of %s"
    const val MODULE_IO_SIZE_NAN = "The signal \"%s\" dimensions must be a number"
    const val MODULE_SIG_ALREADY_ASSIGNED = "The signal \"%s\" has already been assigned"
    const val MODULE_INPUT_NOT_ASSIGNED = "The signal \"%s\" was not assigned"
    const val MODULE_INPUTS_NOT_ASSIGNED = "The signals \"%s\" were not assigned"
    const val ARRAY_SIZE_MULTI_DIM = "Array dimension sizes must be one dimensional"
    const val ARRAY_SIZE_NAN = "Array dimension sizes must be a number (no x or z values)"
    const val ARRAY_SIZE_NEG = "Array size must be positive"
    const val ARRAY_SIZE_TOO_BIG = "Array dimension is HUGE, no error checking can be performed"
    const val ARRAY_INDEX_MULTI_DIM = "Array dimensions must be one dimensional"
    const val ARRAY_CONCAT_DIM_MISMATCH = "Each element in an array concatenation must have the same dimensions"
    const val ARRAY_DUP_INDEX_MULTI_DIM = "The array duplication index must be one dimensional"
    const val ARRAY_DUP_INDEX_NAN = "The array duplication index must be a number (no x or z values)"
    const val ARRAY_BUILDING_DIM_MISMATCH = "Each element in an array builder must have the same dimensions"
    const val ARRAY_INDEX_OUT_OF_BOUNDS = "This index is out of bounds"
    const val ARRAY_INDEX_DIM_MISMATCH = "There are too many indices for this array"
    const val ARRAY_INDEX_NAN = "Array indices must be a number (no x or z values)"
    const val ARRAY_INDEX_TOO_BIG = "Array index is HUGE, no error checking can be performed"
    const val ARRAY_NOT_DIVISIBLE = "The array \"%s\" can't be split evenly"
    const val BIT_SELECTOR_ARRAY = "The value used in bit selection can't be an array"
    const val BIT_SELECTOR_ORDER = "The value on the left must be greater or equal to the value on the right"
    const val BIT_SELECTOR_NAN = "Bit selectors must be a number (no x or z values)"
    const val BIT_SELECTOR_IN_NAME = "This bit selector should not be here"
    const val EXTRA_BIT_SELECTORS = "FSMs can only have one bit selector"
    const val NEG_MULTI_DIM = "Only single dimensional arrays can be negated"
    const val MUL_MULTI_DIM = "Only single dimensional arrays can be multiplied"
    const val DIV_MULTI_DIM = "Only single dimensional arrays can be divided"
    const val ADD_MULTI_DIM = "Only single dimensional arrays can be added"
    const val SUB_MULTI_DIM = "Only single dimensional arrays can be subtracted"
    const val SHIFT_MULTI_DIM = "Only single dimensional arrays can be shifted"
    const val BUILD_MULTI_DIM = "Only single dimensional arrays can be built"
    const val SIGNED_MULTI_DIM = "Only single dimensional values can use \$signed()"
    const val UNSIGNED_MULTI_DIM = "Only single dimensional values can use \$unsigned()"
    const val TERN_SELECTOR_MULTI_DIM = "Only single dimensional arrays can be used as the selector"
    const val VALUE_TOO_BIG = "The value \"%s\" is wider than %s bits and it will be truncated"
    const val OP_DIM_MISMATCH = "When performing an %s operation the argument's dimensions must match"
    const val OP_NOT_NUMBER = "The operator \"%s\" can only be used on simple values"
    const val OP_GT_NOT_NUMBER = "The greater than operator \">\" can only be used on simple values"
    const val OP_LT_NOT_NUMBER = "The less than operator \"<\" can only be used on simple values"
    const val OP_GTE_NOT_NUMBER = "The greater than or equal operator \">=\" can only be used on simple values"
    const val OP_LTE_NOT_NUMBER = "The less than or equal operator \"<=\" can only be used on simple values"
    const val OP_EQ_DIM_MISMATCH = "The dimensions of both arrays must match for the equal operator"
    const val OP_NEQ_DIM_MISMATCH = "The dimensions of both arrays must match for the not equal operator"
    const val OP_TERN_DIM_MISMATCH = "The dimensions of both results must match for the ternary operator"
    const val PORT_DIM_MISMATCH = "The signal \"%s\" does not match the dimensions of the port \"%s\""
    const val ASSIGN_ARRAY_DIM_MISMATCH = "When assigning two arrays, their dimensions must match"
    const val ASSIGN_SIG_NOT_ARRAY = "When assigning two arrays, their dimensions must match"
    const val TRUNC_WARN = "The signal \"%s\" is wider than \"%s\" and the most significant bits will be dropped"
    const val NUM_WIDTH_NAN = "The width of a value must be a number (no x or z values)"
    const val SIG_READ_ONLY = "The signal \"%s\" is read only and can not be written"
    const val SIG_WRITE_ONLY = "The signal \"%s\" is write only and can not be read"
    const val READ_BEFORE_WRITE = "The signal \"%s\" must be written before it can be read in this always block"
    const val MULTIPLE_DRIVERS = "The signal \"%s\" has already been assigned"
    const val OUTPUT_NEVER_ASSIGNED = "The output \"%s\" was never assigned"
    const val NEVER_USED = "\"%s\" was never used"
    const val INVALID_ATTRIBUTE = "\"%s\" is not a valid attribute. Only \"" + Lucid.WIDTH_ATTR + "\" is"
    const val ATTRIBUTE_READ_ONLY = "Attributes are read only"
    const val ATTRIBUTE_BIT_SELECT = "Bit selection can only be used on the \"" + Lucid.WIDTH_ATTR + "\" attribute"
    const val UNKNOWN_FUNCTION = "The function \"%s\" is unknown"
    const val CONST_FUNCTION = "The function \"%s\" can only be used on constants"
    const val FUNCTION_ARG_NAN = "The argument \"%s\" with value \"%s\" must be a number"
    const val FUNCTION_ARG_COUNT = "The function \"%s\" takes exactly %d argument(s)"
    const val FUNCTION_MIN_ARG_COUNT = "The function \"%s\" requires at least %d argument(s)"
    const val FUNCTION_NOT_FLAT = "The function \"%s\" can't be used on multidimensional arrays or structs"
    const val FUNCTION_ARG_ZERO = "The argument \"%s\" can't be zero"
    const val FUNCTION_ARG_NEG = "The argument \"%s\" can't be negative"
    const val FUNCTION_ARG_NOT_ARRAY = "The argument \"%s\" isn't an array"
    const val EXPR_NOT_CONSTANT = "The expression \"%s\" must be constant"
    const val NAME_NOT_CONST =
        "The name \"%s\" is not a constant name. Constants can only consist of capital letters and underscores"
    const val NAME_NOT_TYPE = "The name \"%s\" is not a type name. It must start with a lowercase letter"
    const val CONST_NO_MEMBERS = "Constant \"%s\" doesn't have member \"%s\""
    const val CONST_READ_ONLY = "Constants can only be read"
    const val BIT_SELECT_WIDTH = "Bit selection can not be used on the constant WIDTH"
    const val SIG_AFTER_BIT_SELECT = "The only signal or attribute that can come after a bit selection is WIDTH"
    const val STRING_CANNOT_BE_EMPTY = "String constants cannot be empty."
    const val MULTIPLE_MODULES = "You can only have one module declaration per file"
    const val UNKNOWN_STRUCT_NAME = "The member \"%s\" does not belong to struct \"%s\""
    const val UNKNOWN_STRUCT = "\"%s\" is not a known struct"
    const val LOCAL_STRUCT_ONLY = "Only local structs can be accessed in a global block"
    const val ADD_SUB_NOT_ARRAY = "Addition and subtraction can't be performed on structs"
    const val SHIFT_NOT_ARRAY = "Shifts can't be performed on structs"
    const val BIT_SELECTOR_STRUCT = "Bit selectors can't be structs"
    const val ARRAY_INDEX_STRUCT = "Array indices can't be structs"
    const val ARRAY_CONCAT_STRUCT = "Concatenation can't be performed on structs"
    const val ARRAY_DUP_STRUCT = "Duplication can't be performed on structs"
    const val MUL_DIV_STRUCT = "Multiplication and division can't be performed on structs"
    const val NAMESPACE_CASE =
        "The name of a global block must begin with a capital and contain at least one lowercase letter"
    const val NAMESPACE_IN_USE = "The name \"%s\" is already in use"
    const val STRUCT_MEMBER_CASE = "Struct members must start with a lowercase letter"
    const val STRUCT_NAME_CASE = "A struct's name must start with a lowercase letter"
    const val NAMESPACE_DIRECT = "Global namespaces need to have a constant or struct selected"
    const val UNKNOWN_NAMESPACE = "\"%s\" is not a known global namespace"
    const val NOT_IN_NAMESPACE = "\"%s\" is no in the global namespace \"%s\""
    const val NOT_A_MEMBER = "\"%s\" is not a member of \"%s\""
    const val BIT_SELECTOR_STRUCT_NOT_ARRAY = "Bit selectors can only be used on arrays, not structs"
    const val INOUT_NOT_ARRAY = "Bit selectors can only be used on arrays, not inouts (select an inout member first)"
    const val MODULE_IO_MISSING = "The inout(s), %s, were not connected. Inouts can only be passed out of the module"
    const val WIDTH_NOT_SIMPLE_ARRAY = Lucid.WIDTH_ATTR + " can only be used on arrays that do not contain structs"
    const val WIDTH_COULD_NOT_BE_EVALUATED =
        Lucid.WIDTH_ATTR + " can only be indexed with constants (it must be evaluated during synthesis)"
    const val PRIMITIVE_INVALID_OPTION = "The value %s is not a valid option. Use one of the following: %s"
    const val PRIMITIVE_NAI = "The parameter \"%s\" only accepts integers"
    const val PRIMITIVE_NAD = "The parameter \"%s\" only accepts real numbers"
    const val PRIMITIVE_OUT_OF_RANGE = "%s must be in the range %s"
    const val CONSTRAINT_PORT_UNKNOWN = "The port %s is not a port of the top module"
    const val CONSTRAINT_UNSUPPORTED_ARRAY = "The port %s is of an unsupported type"
    const val CONSTRAINT_UP_AND_DOWN = "Only pullup or pulldown can be specified for a single pin"
    const val CONSTRAINT_UNKNOWN_UNIT = "Unknown frequency unit \"%s\""
    const val CONSTRAINT_MULTI_BIT = "Constraints can only be applied to a single bit"
    const val VALUE_BIGGER_THAN_INT = "The value %s can't fit into 32bits"
    const val STRUCT_CONST_MISSING_VALUE = "The member \"%s\" was not assigned"
    const val UNKNOWN_WIDTH = "The width of the \"%s\" couldn't be determined but is required!"
}

object WarningStrings {
    const val DIVIDE_NOT_POW_2 = "The denominator isn't a constant power of 2. This operation can be very slow and may cause timing errors."
}